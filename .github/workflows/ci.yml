name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18.x'
  POSTGRES_DB: case_management_test
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: postgres

jobs:
  # Code Quality Checks
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        npm ci
        cd backend && npm ci
        cd ../frontend && npm ci
        
    - name: Run ESLint (Backend)
      run: cd backend && npm run lint:check
      
    - name: Run ESLint (Frontend)
      run: cd frontend && npm run lint
      
    - name: Check code formatting (Backend)
      run: cd backend && npm run format:check
      
    - name: Check code formatting (Frontend)
      run: cd frontend && npm run format:check
      
    - name: TypeScript type checking (Backend)
      run: cd backend && npm run type-check
      
    - name: TypeScript type checking (Frontend)
      run: cd frontend && npm run type-check

  # Security Scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        npm ci
        cd backend && npm ci
        cd ../frontend && npm ci
        
    - name: Run npm audit (Backend)
      run: cd backend && npm audit --audit-level moderate
      
    - name: Run npm audit (Frontend)
      run: cd frontend && npm audit --audit-level moderate
      
    - name: Run CodeQL Analysis
      uses: github/codeql-action/init@v3
      with:
        languages: javascript
        
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

  # Unit Tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        npm ci
        cd backend && npm ci
        cd ../frontend && npm ci
        
    - name: Run unit tests (Backend)
      run: cd backend && npm run test:unit
      
    - name: Run unit tests (Frontend)
      run: cd frontend && npm run test:ci
      
    - name: Upload backend coverage reports
      uses: codecov/codecov-action@v4
      with:
        file: ./backend/coverage/lcov.info
        flags: backend
        name: backend-coverage
        
    - name: Upload frontend coverage reports
      uses: codecov/codecov-action@v4
      with:
        file: ./frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage

  # Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: case_management_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        npm ci
        cd backend && npm ci
        cd ../frontend && npm ci
        
    - name: Wait for PostgreSQL
      run: |
        until pg_isready -h localhost -p 5432; do
          echo "Waiting for PostgreSQL..."
          sleep 2
        done
        
    - name: Setup test database
      run: |
        PGPASSWORD=postgres psql -h localhost -U postgres -d case_management_test -c "CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\";"
        
    - name: Run integration tests
      run: cd backend && npm run test:integration
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/case_management_test
        REDIS_URL: redis://localhost:6379

  # Build Test
  build:
    name: Build Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        npm ci
        cd backend && npm ci
        cd ../frontend && npm ci
        
    - name: Build backend
      run: cd backend && npm run build
      
    - name: Build frontend
      run: cd frontend && npm run build

  # Coverage Gate
  coverage-gate:
    name: Coverage Gate
    runs-on: ubuntu-latest
    needs: [unit-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        npm ci
        cd backend && npm ci
        cd ../frontend && npm ci
        
    - name: Generate coverage report
      run: ./scripts/coverage-report.sh
      
    - name: Check coverage threshold
      run: |
        BACKEND_COVERAGE=$(grep -o 'All files.*[0-9.]*%' backend/coverage/lcov-report/index.html | grep -o '[0-9.]*%' | sed 's/%//')
        FRONTEND_COVERAGE=$(grep -o 'All files.*[0-9.]*%' frontend/coverage/lcov-report/index.html | grep -o '[0-9.]*%' | sed 's/%//')
        
        echo "Backend coverage: ${BACKEND_COVERAGE}%"
        echo "Frontend coverage: ${FRONTEND_COVERAGE}%"
        
        if (( $(echo "${BACKEND_COVERAGE} < 90" | bc -l) )); then
          echo "Backend coverage ${BACKEND_COVERAGE}% is below 90% threshold"
          exit 1
        fi
        
        if (( $(echo "${FRONTEND_COVERAGE} < 90" | bc -l) )); then
          echo "Frontend coverage ${FRONTEND_COVERAGE}% is below 90% threshold"
          exit 1
        fi
        
        echo "All coverage thresholds met!"

  # Quality Gate Summary
  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [code-quality, security, unit-tests, integration-tests, build, coverage-gate]
    if: always()
    
    steps:
    - name: Check all jobs status
      run: |
        if [[ "${{ needs.code-quality.result }}" != "success" ]]; then
          echo "Code quality checks failed"
          exit 1
        fi
        
        if [[ "${{ needs.security.result }}" != "success" ]]; then
          echo "Security checks failed"
          exit 1
        fi
        
        if [[ "${{ needs.unit-tests.result }}" != "success" ]]; then
          echo "Unit tests failed"
          exit 1
        fi
        
        if [[ "${{ needs.integration-tests.result }}" != "success" ]]; then
          echo "Integration tests failed"
          exit 1
        fi
        
        if [[ "${{ needs.build.result }}" != "success" ]]; then
          echo "Build failed"
          exit 1
        fi
        
        if [[ "${{ needs.coverage-gate.result }}" != "success" ]]; then
          echo "Coverage gate failed"
          exit 1
        fi
        
        echo "All quality gates passed! âœ…"