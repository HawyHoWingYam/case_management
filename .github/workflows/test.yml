name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Backend Unit Tests
  backend-unit-tests:
    name: Backend Unit Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: Install backend dependencies
      working-directory: backend
      run: npm ci

    - name: Run backend unit tests
      working-directory: backend
      run: npm run test:unit
      env:
        NODE_ENV: test

    - name: Upload backend unit test coverage
      uses: codecov/codecov-action@v3
      with:
        files: ./backend/coverage/lcov.info
        flags: backend-unit
        name: backend-unit-tests

  # Frontend Unit Tests
  frontend-unit-tests:
    name: Frontend Unit Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      working-directory: frontend
      run: npm ci

    - name: Run frontend unit tests
      working-directory: frontend
      run: npm run test:ci
      env:
        NODE_ENV: test

    - name: Upload frontend unit test coverage
      uses: codecov/codecov-action@v3
      with:
        files: ./frontend/coverage/lcov.info
        flags: frontend-unit
        name: frontend-unit-tests

  # Backend Integration Tests
  backend-integration-tests:
    name: Backend Integration Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: case_management_test
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5433:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6380:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: Install backend dependencies
      working-directory: backend
      run: npm ci

    - name: Setup test database
      run: |
        PGPASSWORD=test_password psql -h localhost -p 5433 -U test_user -d case_management_test -f docker/postgres/init/02-create-initial-tables.sql
        PGPASSWORD=test_password psql -h localhost -p 5433 -U test_user -d case_management_test -f docker/postgres/init/03-seed-test-data.sql

    - name: Run backend integration tests
      working-directory: backend
      run: npm run test:integration
      env:
        NODE_ENV: test
        TEST_DB_HOST: localhost
        TEST_DB_PORT: 5433
        TEST_DB_NAME: case_management_test
        TEST_DB_USERNAME: test_user
        TEST_DB_PASSWORD: test_password
        TEST_REDIS_HOST: localhost
        TEST_REDIS_PORT: 6380

    - name: Upload backend integration test coverage
      uses: codecov/codecov-action@v3
      with:
        files: ./backend/coverage/integration/lcov.info
        flags: backend-integration
        name: backend-integration-tests

  # E2E Tests
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: case_management_test
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5433:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6380:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: |
        cd backend && npm ci
        cd ../frontend && npm ci

    - name: Setup test database
      run: |
        PGPASSWORD=test_password psql -h localhost -p 5433 -U test_user -d case_management_test -f docker/postgres/init/02-create-initial-tables.sql
        PGPASSWORD=test_password psql -h localhost -p 5433 -U test_user -d case_management_test -f docker/postgres/init/03-seed-test-data.sql

    - name: Build applications
      run: |
        cd backend && npm run build
        cd ../frontend && npm run build

    - name: Start backend server
      run: |
        cd backend && npm run start:prod &
        sleep 10
      env:
        NODE_ENV: test
        TEST_DB_HOST: localhost
        TEST_DB_PORT: 5433
        TEST_DB_NAME: case_management_test
        TEST_DB_USERNAME: test_user
        TEST_DB_PASSWORD: test_password
        TEST_REDIS_HOST: localhost
        TEST_REDIS_PORT: 6380

    - name: Start frontend server
      run: |
        cd frontend && npm start &
        sleep 10
      env:
        NODE_ENV: test
        NEXT_PUBLIC_API_URL: http://localhost:3001/api

    - name: Wait for servers to be ready
      run: |
        npx wait-on http://localhost:3000 http://localhost:3001/health --timeout 60000

    - name: Run E2E tests
      run: npm run test:e2e
      env:
        CYPRESS_baseUrl: http://localhost:3000
        CYPRESS_apiUrl: http://localhost:3001/api
        TEST_DB_HOST: localhost
        TEST_DB_PORT: 5433
        TEST_DB_NAME: case_management_test
        TEST_DB_USERNAME: test_user
        TEST_DB_PASSWORD: test_password

    - name: Upload E2E test artifacts
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: cypress-screenshots
        path: cypress/screenshots

    - name: Upload E2E test videos
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: cypress-videos
        path: cypress/videos

  # Security Tests
  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: |
        cd backend && npm ci
        cd ../frontend && npm ci

    - name: Run security audit (backend)
      working-directory: backend
      run: npm audit --audit-level high

    - name: Run security audit (frontend)
      working-directory: frontend
      run: npm audit --audit-level high

    - name: Run CodeQL analysis
      uses: github/codeql-action/analyze@v2
      with:
        languages: javascript, typescript

    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high

  # Performance Tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: |
        cd frontend && npm ci

    - name: Build frontend
      working-directory: frontend
      run: npm run build

    - name: Run Lighthouse CI
      run: |
        npm install -g @lhci/cli@0.12.x
        lhci autorun
      env:
        LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

  # Coverage Report
  coverage-report:
    name: Coverage Report
    runs-on: ubuntu-latest
    needs: [backend-unit-tests, frontend-unit-tests, backend-integration-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download coverage reports
      uses: actions/download-artifact@v3

    - name: Generate combined coverage report
      run: |
        echo "## Test Coverage Report" >> $GITHUB_STEP_SUMMARY
        echo "Coverage reports have been uploaded to Codecov" >> $GITHUB_STEP_SUMMARY

  # Quality Gate
  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [backend-unit-tests, frontend-unit-tests, backend-integration-tests, e2e-tests, security-tests]
    if: always()
    
    steps:
    - name: Check test results
      run: |
        if [[ "${{ needs.backend-unit-tests.result }}" != "success" ]]; then
          echo "Backend unit tests failed"
          exit 1
        fi
        if [[ "${{ needs.frontend-unit-tests.result }}" != "success" ]]; then
          echo "Frontend unit tests failed"
          exit 1
        fi
        if [[ "${{ needs.backend-integration-tests.result }}" != "success" ]]; then
          echo "Backend integration tests failed"
          exit 1
        fi
        if [[ "${{ needs.e2e-tests.result }}" != "success" ]]; then
          echo "E2E tests failed"
          exit 1
        fi
        if [[ "${{ needs.security-tests.result }}" != "success" ]]; then
          echo "Security tests failed"
          exit 1
        fi
        echo "All tests passed! âœ…"

    - name: Update PR status
      if: github.event_name == 'pull_request'
      run: |
        echo "Quality gate passed. PR is ready for review." >> $GITHUB_STEP_SUMMARY