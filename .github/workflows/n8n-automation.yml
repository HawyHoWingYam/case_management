name: n8n Automation Workflows

on:
  workflow_run:
    workflows: ["Backend CI/CD Pipeline", "Frontend CI/CD Pipeline", "Database CI/CD Pipeline"]
    types: [completed]
  
  # Manual trigger for testing
  workflow_dispatch:
    inputs:
      notification_type:
        description: 'Type of notification to send'
        required: true
        default: 'test'
        type: choice
        options:
        - test
        - deployment_success
        - deployment_failure
        - pr_review_reminder
        - performance_alert
      environment:
        description: 'Environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      message:
        description: 'Custom message (optional)'
        required: false
        type: string

env:
  N8N_WEBHOOK_URL: ${{ secrets.N8N_WEBHOOK_URL }}
  WEBHOOK_SECRET: ${{ secrets.WEBHOOK_SECRET }}

jobs:
  # Deployment Success Notification
  deployment-success:
    name: Deployment Success Notification
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success' || github.event.inputs.notification_type == 'deployment_success'
    timeout-minutes: 5

    steps:
      - name: Extract workflow information
        id: workflow_info
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "workflow_name=Manual Test" >> $GITHUB_OUTPUT
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo "workflow_name=${{ github.event.workflow_run.name }}" >> $GITHUB_OUTPUT
            echo "environment=${{ github.event.workflow_run.head_branch == 'main' && 'production' || 'staging' }}" >> $GITHUB_OUTPUT
            echo "status=${{ github.event.workflow_run.conclusion }}" >> $GITHUB_OUTPUT
          fi

      - name: Determine service type
        id: service_info
        run: |
          case "${{ steps.workflow_info.outputs.workflow_name }}" in
            *"Backend"*)
              echo "service=backend" >> $GITHUB_OUTPUT
              ;;
            *"Frontend"*)
              echo "service=frontend" >> $GITHUB_OUTPUT
              ;;
            *"Database"*)
              echo "service=database" >> $GITHUB_OUTPUT
              ;;
            *)
              echo "service=system" >> $GITHUB_OUTPUT
              ;;
          esac

      - name: Send deployment success notification
        run: |
          curl -X POST "${{ env.N8N_WEBHOOK_URL }}/deployment-notification" \
            -H "Content-Type: application/json" \
            -H "X-Webhook-Secret: ${{ env.WEBHOOK_SECRET }}" \
            -d '{
              "type": "deployment_success",
              "workflow": "${{ steps.workflow_info.outputs.workflow_name }}",
              "service": "${{ steps.service_info.outputs.service }}",
              "environment": "${{ steps.workflow_info.outputs.environment }}",
              "commit": "${{ github.sha }}",
              "branch": "${{ github.ref_name }}",
              "author": "${{ github.actor }}",
              "repository": "${{ github.repository }}",
              "run_url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}",
              "timestamp": "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'",
              "custom_message": "${{ github.event.inputs.message || '' }}"
            }'

  # Deployment Failure Notification
  deployment-failure:
    name: Deployment Failure Notification
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'failure' || github.event.inputs.notification_type == 'deployment_failure'
    timeout-minutes: 5

    steps:
      - name: Extract workflow information
        id: workflow_info
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "workflow_name=Manual Test" >> $GITHUB_OUTPUT
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
            echo "status=failure" >> $GITHUB_OUTPUT
          else
            echo "workflow_name=${{ github.event.workflow_run.name }}" >> $GITHUB_OUTPUT
            echo "environment=${{ github.event.workflow_run.head_branch == 'main' && 'production' || 'staging' }}" >> $GITHUB_OUTPUT
            echo "status=${{ github.event.workflow_run.conclusion }}" >> $GITHUB_OUTPUT
          fi

      - name: Determine service type
        id: service_info
        run: |
          case "${{ steps.workflow_info.outputs.workflow_name }}" in
            *"Backend"*)
              echo "service=backend" >> $GITHUB_OUTPUT
              ;;
            *"Frontend"*)
              echo "service=frontend" >> $GITHUB_OUTPUT
              ;;
            *"Database"*)
              echo "service=database" >> $GITHUB_OUTPUT
              ;;
            *)
              echo "service=system" >> $GITHUB_OUTPUT
              ;;
          esac

      - name: Send deployment failure notification
        run: |
          curl -X POST "${{ env.N8N_WEBHOOK_URL }}/deployment-notification" \
            -H "Content-Type: application/json" \
            -H "X-Webhook-Secret: ${{ env.WEBHOOK_SECRET }}" \
            -d '{
              "type": "deployment_failure",
              "workflow": "${{ steps.workflow_info.outputs.workflow_name }}",
              "service": "${{ steps.service_info.outputs.service }}",
              "environment": "${{ steps.workflow_info.outputs.environment }}",
              "commit": "${{ github.sha }}",
              "branch": "${{ github.ref_name }}",
              "author": "${{ github.actor }}",
              "repository": "${{ github.repository }}",
              "run_url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}",
              "failure_url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.event.workflow_run.id || github.run_id }}",
              "timestamp": "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'",
              "custom_message": "${{ github.event.inputs.message || '' }}"
            }'

      - name: Create GitHub issue for critical failures
        if: steps.workflow_info.outputs.environment == 'production'
        uses: actions/github-script@v6
        with:
          script: |
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `🚨 Production Deployment Failure - ${{ steps.service_info.outputs.service }}`,
              body: `
            ## 🚨 Critical Production Deployment Failure
            
            **Service**: ${{ steps.service_info.outputs.service }}
            **Environment**: ${{ steps.workflow_info.outputs.environment }}
            **Workflow**: ${{ steps.workflow_info.outputs.workflow_name }}
            **Commit**: ${{ github.sha }}
            **Branch**: ${{ github.ref_name }}
            **Author**: ${{ github.actor }}
            
            **Failure Details**:
            - Workflow Run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.event.workflow_run.id || github.run_id }}
            - Timestamp: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
            
            **Immediate Actions Required**:
            - [ ] Investigate failure logs
            - [ ] Determine rollback necessity
            - [ ] Notify stakeholders
            - [ ] Implement fix
            - [ ] Verify system stability
            
            **Custom Message**: ${{ github.event.inputs.message || 'None' }}
            
            ---
            *This issue was automatically created by the CI/CD failure notification system.*
              `,
              labels: ['bug', 'critical', 'production-incident', 'auto-created'],
              assignees: ['${{ github.actor }}']
            });
            
            console.log('Created issue:', issue.data.html_url);

  # Test Notification
  test-notification:
    name: Test Notification
    runs-on: ubuntu-latest
    if: github.event.inputs.notification_type == 'test'
    timeout-minutes: 5

    steps:
      - name: Send test notification
        run: |
          curl -X POST "${{ env.N8N_WEBHOOK_URL }}/test-notification" \
            -H "Content-Type: application/json" \
            -H "X-Webhook-Secret: ${{ env.WEBHOOK_SECRET }}" \
            -d '{
              "type": "test",
              "message": "GitHub Actions to n8n integration test",
              "environment": "${{ github.event.inputs.environment }}",
              "timestamp": "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'",
              "triggered_by": "${{ github.actor }}",
              "custom_message": "${{ github.event.inputs.message || 'Integration test from GitHub Actions' }}"
            }'

      - name: Verify n8n webhook response
        run: |
          echo "✅ Test notification sent successfully"
          echo "Check your n8n webhook endpoint for the test payload"

  # Performance Alert (triggered by manual dispatch)
  performance-alert:
    name: Performance Alert
    runs-on: ubuntu-latest
    if: github.event.inputs.notification_type == 'performance_alert'
    timeout-minutes: 5

    steps:
      - name: Send performance alert
        run: |
          curl -X POST "${{ env.N8N_WEBHOOK_URL }}/performance-alert" \
            -H "Content-Type: application/json" \
            -H "X-Webhook-Secret: ${{ env.WEBHOOK_SECRET }}" \
            -d '{
              "type": "performance_alert",
              "environment": "${{ github.event.inputs.environment }}",
              "alert_level": "warning",
              "metrics": {
                "response_time": "500ms",
                "error_rate": "5%",
                "throughput": "100 req/s"
              },
              "message": "${{ github.event.inputs.message || 'Performance degradation detected' }}",
              "repository": "${{ github.repository }}",
              "timestamp": "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'",
              "triggered_by": "${{ github.actor }}"
            }'

  # Health Check Notification
  health-check:
    name: System Health Check
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.notification_type == 'test'
    timeout-minutes: 10

    steps:
      - name: Check n8n webhook endpoint
        id: health_check
        run: |
          if curl -f -m 10 "${{ env.N8N_WEBHOOK_URL }}/health" >/dev/null 2>&1; then
            echo "status=healthy" >> $GITHUB_OUTPUT
            echo "✅ n8n webhook endpoint is healthy"
          else
            echo "status=unhealthy" >> $GITHUB_OUTPUT
            echo "❌ n8n webhook endpoint is not responding"
          fi

      - name: Send health status notification
        run: |
          curl -X POST "${{ env.N8N_WEBHOOK_URL }}/system-health" \
            -H "Content-Type: application/json" \
            -H "X-Webhook-Secret: ${{ env.WEBHOOK_SECRET }}" \
            -d '{
              "type": "system_health",
              "status": "${{ steps.health_check.outputs.status }}",
              "service": "n8n-webhook",
              "environment": "${{ github.event.inputs.environment }}",
              "timestamp": "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'",
              "checked_by": "${{ github.actor }}",
              "repository": "${{ github.repository }}"
            }' || echo "Health check notification failed - this is expected if n8n is down"

  # Cleanup and Monitoring
  workflow-monitoring:
    name: Workflow Monitoring
    runs-on: ubuntu-latest
    if: always()
    needs: [deployment-success, deployment-failure, test-notification, performance-alert]
    timeout-minutes: 5

    steps:
      - name: Collect workflow metrics
        run: |
          echo "📊 Workflow Execution Summary"
          echo "============================"
          echo "Trigger Event: ${{ github.event_name }}"
          echo "Repository: ${{ github.repository }}"
          echo "Actor: ${{ github.actor }}"
          echo "Timestamp: $(date -u +"%Y-%m-%d %H:%M:%S UTC")"
          
          if [ "${{ github.event_name }}" = "workflow_run" ]; then
            echo "Source Workflow: ${{ github.event.workflow_run.name }}"
            echo "Source Status: ${{ github.event.workflow_run.conclusion }}"
            echo "Source Branch: ${{ github.event.workflow_run.head_branch }}"
          fi

      - name: Send monitoring data to n8n
        if: env.N8N_WEBHOOK_URL != ''
        run: |
          curl -X POST "${{ env.N8N_WEBHOOK_URL }}/workflow-monitoring" \
            -H "Content-Type: application/json" \
            -H "X-Webhook-Secret: ${{ env.WEBHOOK_SECRET }}" \
            -d '{
              "type": "workflow_monitoring",
              "event_type": "${{ github.event_name }}",
              "repository": "${{ github.repository }}",
              "actor": "${{ github.actor }}",
              "jobs_status": {
                "deployment-success": "${{ needs.deployment-success.result }}",
                "deployment-failure": "${{ needs.deployment-failure.result }}",
                "test-notification": "${{ needs.test-notification.result }}",
                "performance-alert": "${{ needs.performance-alert.result }}"
              },
              "timestamp": "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'"
            }' || echo "Monitoring notification failed - continuing"