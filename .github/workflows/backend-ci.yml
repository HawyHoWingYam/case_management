name: Backend CI/CD Pipeline

on:
  push:
    branches: [main, develop]
    paths: ['backend/**', '.github/workflows/backend-ci.yml']
  pull_request:
    branches: [main, develop]
    paths: ['backend/**', '.github/workflows/backend-ci.yml']

env:
  NODE_VERSION: '20'
  CACHE_KEY_PREFIX: backend-v1

jobs:
  # Quality Gates - Lint, Type Check, Security Scan
  quality-checks:
    name: Quality Checks
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install dependencies
        run: cd backend && npm ci --prefer-offline

      - name: Lint code
        run: cd backend && npm run lint

      - name: Type checking
        run: cd backend && npm run build --if-present || npx tsc --noEmit

      - name: Security audit
        run: cd backend && npm audit --audit-level moderate

      - name: Dependency vulnerability scan
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --file=backend/package.json --severity-threshold=medium

  # Unit and Integration Tests
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: quality-checks
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: case_management_test
          POSTGRES_USER: test_user
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install dependencies
        run: cd backend && npm ci --prefer-offline

      - name: Setup test database
        run: cd backend && npx prisma migrate deploy
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/case_management_test

      - name: Seed test data
        run: cd backend && npm run seed
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/case_management_test

      - name: Run unit tests
        run: cd backend && npm run test:cov
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/case_management_test
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-secret-key
          
      - name: Run integration tests
        run: cd backend && npm run test:e2e
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/case_management_test
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-secret-key

      - name: Upload test coverage
        uses: codecov/codecov-action@v3
        with:
          file: backend/coverage/lcov.info
          flags: backend
          name: backend-coverage

      - name: Enforce coverage threshold
        run: |
          cd backend
          COVERAGE=$(npm run test:cov -- --silent | grep -o '[0-9]*\.[0-9]*%' | tail -1 | sed 's/%//')
          if (( $(echo "$COVERAGE < 90" | bc -l) )); then
            echo "❌ Coverage $COVERAGE% is below 90% threshold"
            exit 1
          else
            echo "✅ Coverage $COVERAGE% meets 90% threshold"
          fi

  # Code Quality Analysis
  code-analysis:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: quality-checks
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: javascript

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  # Build and Docker Image Creation
  build:
    name: Build Application
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [test, quality-checks]
    if: github.event_name == 'push'

    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install dependencies
        run: cd backend && npm ci --prefer-offline --production=false

      - name: Build application
        run: cd backend && npm run build

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}/backend
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: ${{ github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

  # Deployment to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging
        run: |
          echo "🚀 Deploying backend to staging environment"
          echo "Image: ${{ needs.build.outputs.image-tag }}"
          # Add actual deployment commands here (e.g., kubectl, docker-compose, etc.)

      - name: Run smoke tests
        run: |
          echo "🧪 Running smoke tests against staging"
          # Add smoke tests here
          sleep 10
          curl -f ${{ secrets.STAGING_BACKEND_URL }}/health || exit 1

      - name: Notify deployment success
        if: success()
        uses: actions/github-script@v6
        with:
          script: |
            const webhookUrl = '${{ secrets.N8N_WEBHOOK_URL }}';
            if (webhookUrl) {
              await fetch(webhookUrl, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                  type: 'deployment_success',
                  environment: 'staging',
                  service: 'backend',
                  commit: '${{ github.sha }}',
                  branch: '${{ github.ref_name }}',
                  author: '${{ github.actor }}'
                })
              });
            }

  # Production Deployment (Manual Approval Required)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Blue-Green Deployment
        run: |
          echo "🔄 Initiating blue-green deployment to production"
          echo "Image: ${{ needs.build.outputs.image-tag }}"
          # Add blue-green deployment logic here

      - name: Health check
        run: |
          echo "🏥 Performing health checks"
          # Add comprehensive health checks
          sleep 15
          curl -f ${{ secrets.PRODUCTION_BACKEND_URL }}/health || exit 1

      - name: Database migration
        run: |
          echo "🗄️ Running database migrations"
          # Add migration commands here with rollback capability

      - name: Switch traffic to new version
        run: |
          echo "🔀 Switching traffic to new version"
          # Add traffic switching logic

      - name: Notify deployment success
        if: success()
        uses: actions/github-script@v6
        with:
          script: |
            const webhookUrl = '${{ secrets.N8N_WEBHOOK_URL }}';
            if (webhookUrl) {
              await fetch(webhookUrl, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                  type: 'deployment_success',
                  environment: 'production',
                  service: 'backend',
                  commit: '${{ github.sha }}',
                  branch: '${{ github.ref_name }}',
                  author: '${{ github.actor }}'
                })
              });
            }

  # Rollback capability
  rollback:
    name: Emergency Rollback
    runs-on: ubuntu-latest
    if: failure() && (github.ref == 'refs/heads/main')
    needs: [deploy-production]
    environment: production

    steps:
      - name: Rollback deployment
        run: |
          echo "🔄 Initiating emergency rollback"
          # Add rollback logic here

      - name: Notify rollback
        uses: actions/github-script@v6
        with:
          script: |
            const webhookUrl = '${{ secrets.N8N_WEBHOOK_URL }}';
            if (webhookUrl) {
              await fetch(webhookUrl, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                  type: 'deployment_rollback',
                  environment: 'production',
                  service: 'backend',
                  commit: '${{ github.sha }}',
                  reason: 'deployment_failure'
                })
              });
            }