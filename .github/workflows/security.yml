name: Security Scan

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security scans daily at 1 AM UTC
    - cron: '0 1 * * *'

env:
  NODE_VERSION: '18.x'

jobs:
  # Dependency Vulnerability Scanning
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        npm ci
        cd backend && npm ci
        cd ../frontend && npm ci
        
    - name: Run npm audit (Root)
      run: npm audit --audit-level moderate
      continue-on-error: true
      
    - name: Run npm audit (Backend)
      run: cd backend && npm audit --audit-level moderate
      continue-on-error: true
      
    - name: Run npm audit (Frontend)
      run: cd frontend && npm audit --audit-level moderate
      continue-on-error: true
      
    - name: Run Snyk to check for vulnerabilities
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=medium --all-projects
        
    - name: Upload Snyk results to GitHub Code Scanning
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: snyk.sarif

  # Static Application Security Testing (SAST)
  sast-scan:
    name: Static Security Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: javascript
        queries: security-and-quality
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        npm ci
        cd backend && npm ci
        cd ../frontend && npm ci
        
    - name: Build applications
      run: |
        cd backend && npm run build
        cd ../frontend && npm run build
        
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      
    - name: Run ESLint Security Plugin (Backend)
      run: cd backend && npm run lint -- --format sarif --output-file eslint-backend.sarif
      continue-on-error: true
      
    - name: Run ESLint Security Plugin (Frontend)
      run: cd frontend && npm run lint -- --format @microsoft/eslint-formatter-sarif --output-file eslint-frontend.sarif
      continue-on-error: true
      
    - name: Upload ESLint SARIF results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: |
          backend/eslint-backend.sarif
          frontend/eslint-frontend.sarif

  # Secret Scanning
  secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run TruffleHog OSS
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified
        
    - name: Run GitLeaks
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

  # Docker Security Scanning
  docker-scan:
    name: Docker Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Build Docker images
      run: |
        docker build -t case-management-backend:latest -f docker/backend/Dockerfile .
        docker build -t case-management-frontend:latest -f docker/frontend/Dockerfile .
        
    - name: Run Trivy vulnerability scanner (Backend)
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'case-management-backend:latest'
        format: 'sarif'
        output: 'trivy-backend.sarif'
        
    - name: Run Trivy vulnerability scanner (Frontend)
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'case-management-frontend:latest'
        format: 'sarif'
        output: 'trivy-frontend.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: |
          trivy-backend.sarif
          trivy-frontend.sarif

  # Infrastructure as Code (IaC) Security
  iac-scan:
    name: Infrastructure Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Checkov IaC Scanner
      uses: bridgecrewio/checkov-action@master
      with:
        directory: .
        framework: dockerfile,secrets
        output_format: sarif
        output_file_path: checkov.sarif
        
    - name: Upload Checkov results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: checkov.sarif

  # Security Configuration Assessment
  security-config:
    name: Security Configuration Assessment
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check for security misconfigurations
      run: |
        # Check for common security misconfigurations
        
        echo "Checking for exposed secrets..."
        if find . -name "*.env*" -not -path "./node_modules/*" | grep -v ".env.example"; then
          echo "Warning: Environment files found"
        fi
        
        echo "Checking Docker configurations..."
        if find . -name "Dockerfile*" -exec grep -l "FROM.*:latest" {} \;; then
          echo "Warning: Docker images using 'latest' tag found"
        fi
        
        echo "Checking for hardcoded credentials..."
        if grep -r -i "password\|secret\|key\|token" --include="*.ts" --include="*.js" --include="*.json" . | grep -v node_modules | grep -v ".git"; then
          echo "Warning: Potential hardcoded credentials found"
        fi
        
    - name: Security headers check
      run: |
        echo "Security configuration checks completed"

  # OWASP ZAP Security Scan
  zap-scan:
    name: OWASP ZAP Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'push'
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: case_management_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies and build
      run: |
        npm ci
        cd backend && npm ci && npm run build
        cd ../frontend && npm ci && npm run build
        
    - name: Start applications
      run: |
        cd backend && npm run start:prod &
        cd frontend && npm start &
        sleep 20
      env:
        NODE_ENV: test
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/case_management_test
        REDIS_URL: redis://localhost:6379
        
    - name: Wait for applications
      run: npx wait-on http://localhost:3000 http://localhost:3001 --timeout 120000
      
    - name: Run OWASP ZAP Baseline Scan
      uses: zaproxy/action-baseline@v0.10.0
      with:
        target: 'http://localhost:3000'
        rules_file_name: '.zap/rules.tsv'
        cmd_options: '-a'
        
    - name: Upload ZAP results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: zap-reports
        path: report_html.html

  # Security Summary
  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [dependency-scan, sast-scan, secret-scan, docker-scan, iac-scan, security-config]
    if: always()
    
    steps:
    - name: Generate security summary
      run: |
        echo "Security scan results:"
        echo "- Dependency scan: ${{ needs.dependency-scan.result }}"
        echo "- SAST scan: ${{ needs.sast-scan.result }}"
        echo "- Secret scan: ${{ needs.secret-scan.result }}"
        echo "- Docker scan: ${{ needs.docker-scan.result }}"
        echo "- IaC scan: ${{ needs.iac-scan.result }}"
        echo "- Security config: ${{ needs.security-config.result }}"
        
        if [[ "${{ needs.dependency-scan.result }}" != "success" || 
              "${{ needs.sast-scan.result }}" != "success" || 
              "${{ needs.secret-scan.result }}" != "success" || 
              "${{ needs.docker-scan.result }}" != "success" || 
              "${{ needs.iac-scan.result }}" != "success" || 
              "${{ needs.security-config.result }}" != "success" ]]; then
          echo "Some security checks failed. Please review the results."
          exit 1
        fi
        
        echo "All security checks passed! âœ…"