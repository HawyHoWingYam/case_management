# Docker Compose configuration for testing environment
# This file sets up isolated test services to avoid conflicts with development

version: '3.8'

services:
  # Test PostgreSQL Database
  postgres-test:
    image: postgres:15-alpine
    container_name: cms_postgres_test
    environment:
      POSTGRES_DB: case_management_test
      POSTGRES_USER: test_user
      POSTGRES_PASSWORD: test_password
      POSTGRES_MULTIPLE_DATABASES: case_management_test,case_management_test_integration
    ports:
      - "5433:5432"
    volumes:
      - ./docker/postgres/config/postgresql.conf:/etc/postgresql/postgresql.conf
      - ./docker/postgres/init/create-multiple-databases.sh:/docker-entrypoint-initdb.d/create-multiple-databases.sh
      - postgres_test_data:/var/lib/postgresql/data
    networks:
      - test-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U test_user -d case_management_test"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Test Redis Cache
  redis-test:
    image: redis:7-alpine
    container_name: cms_redis_test
    ports:
      - "6380:6379"
    volumes:
      - ./docker/redis/redis-test.conf:/usr/local/etc/redis/redis.conf
      - redis_test_data:/data
    networks:
      - test-network
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Test LocalStack (AWS services emulation)
  localstack-test:
    image: localstack/localstack:latest
    container_name: cms_localstack_test
    environment:
      SERVICES: s3,ses,sqs
      DEBUG: 1
      DATA_DIR: /tmp/localstack/data
      LAMBDA_EXECUTOR: docker
      DOCKER_HOST: unix:///var/run/docker.sock
      AWS_DEFAULT_REGION: us-east-1
      AWS_ACCESS_KEY_ID: test
      AWS_SECRET_ACCESS_KEY: test
    ports:
      - "4567-4597:4566-4596"
    volumes:
      - ./docker/localstack/init:/etc/localstack/init/ready.d
      - /var/run/docker.sock:/var/run/docker.sock
      - localstack_test_data:/tmp/localstack
    networks:
      - test-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4566/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Test Database Initialization Service
  db-test-init:
    image: postgres:15-alpine
    container_name: cms_db_test_init
    depends_on:
      postgres-test:
        condition: service_healthy
    environment:
      PGHOST: postgres-test
      PGPORT: 5432
      PGUSER: test_user
      PGPASSWORD: test_password
      PGDATABASE: case_management_test
    volumes:
      - ./docker/postgres/init/01-create-databases.sql:/scripts/01-create-databases.sql
      - ./docker/postgres/init/02-create-initial-tables.sql:/scripts/02-create-initial-tables.sql
      - ./docker/postgres/init/03-seed-test-data.sql:/scripts/03-seed-test-data.sql
    networks:
      - test-network
    command: >
      sh -c "
        echo 'Waiting for PostgreSQL to be ready...'
        until pg_isready -h postgres-test -p 5432 -U test_user; do
          sleep 2
        done
        echo 'PostgreSQL is ready. Initializing test database...'
        psql -h postgres-test -U test_user -d case_management_test -f /scripts/01-create-databases.sql
        psql -h postgres-test -U test_user -d case_management_test -f /scripts/02-create-initial-tables.sql
        psql -h postgres-test -U test_user -d case_management_test -f /scripts/03-seed-test-data.sql
        echo 'Test database initialization complete.'
      "
    restart: "no"

volumes:
  postgres_test_data:
    driver: local
  redis_test_data:
    driver: local
  localstack_test_data:
    driver: local

networks:
  test-network:
    driver: bridge
    name: cms-test-network